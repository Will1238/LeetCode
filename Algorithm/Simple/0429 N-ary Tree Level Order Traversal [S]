/*
分析：和一般的层序遍历类似，但每一层分为一个List，所以添加辅助遍历level记录当前层数
*/
//执行用时: 3 ms, 在N-ary Tree Level Order Traversal的Java提交中击败了100.00% 的用户
/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val,List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
    private List<List<Integer>> arr = new ArrayList();
    
    public List<List<Integer>> levelOrder(Node root) {
        if (root != null) 
            return this.levelOrder(root, 0);
        return this.arr;
    }
    
    public List<List<Integer>> levelOrder(Node root, int level) {
        if (root != null) {
            if (level >= this.arr.size())
                this.arr.add(new ArrayList<Integer>());
            this.arr.get(level++).add(root.val);
            for(Node child : root.children)
                this.levelOrder(child, level);
        }
        return this.arr;
    }
}

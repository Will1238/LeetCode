//执行用时: 33 ms, 在Move Zeroes的Java提交中击败了14.43% 的用户
class Solution {
    public void moveZeroes(int[] nums) {
        int flagStart = -1, flagEnd = nums.length - 1, count = 0;
        while (flagStart < flagEnd) {
            boolean flag = false;
            for (int i = (flagStart > 0 ? flagStart : 0) ; i <= flagEnd; i++) {
                if (nums[i] == 0) {
                    flagStart = i;
                    flag = true;
                    break;
                }
            }
            if (flagStart == -1 || flag == false) {
                return;
            }
            if (flagStart <= flagEnd - 1) {
                for (int i = flagStart; i < flagEnd; i++) {
                    nums[i] = nums[i+1];
                }
                nums[flagEnd] = 0;
                flagEnd--;
            } else {
                break;
            }
        }
    }
}


//改进：
//执行用时: 3 ms, 在Move Zeroes的Java提交中击败了55.65% 的用户
class Solution {
    public void moveZeroes(int[] nums) {
        int count = 0, flag = -1, move = 1;

        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 0) {
                count++;
                if (flag == -1) {
                    flag = i;
                }
            }
        }
        if (count == 0) {
            return;
        } else {
            for (int i = flag; i < nums.length; i++) {
                if (i + move < nums.length) {
                    nums[i] = nums[i + move];
                } else {
                    break;
                }

                while (nums[i] == 0 && i+move < nums.length) {
                    move++;
                    if (i + move < nums.length) {
                        nums[i] = nums[i + move];
                    } else {
                        break;
                    }
                }
            }
            for (int i = nums.length - count; i < nums.length; i++) {
                nums[i] = 0;
            }
        }
    }
}

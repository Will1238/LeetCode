//执行用时: 9 ms, 在Longest Palindrome的Java提交中击败了89.04% 的用户
/*
分析：统计所有字符出现的次数，如果出现次数是大于0，则取其最大偶数部分，如次数为5则取4，因为偶数部分才能成对形成回文串
同时，设置flag标志位，如果有多余的字符，最后可以放在中间，则在原来的长度上加一
*/
class Solution {
    public int longestPalindrome(String s) {
        if (s == null || s.length() == 0) {
            return 0;
        }
        int[] chars = new int[256];
        char[] str = s.toCharArray();
        int length = 0;
        boolean flag = false;
        for (int i = 0; i < str.length; i++) {
            chars[str[i]]++;
        }
        for (char i = 'a'; i <= 'z'; i++) {
            if (chars[i] > 0) {
                length += chars[i] - (chars[i]%2);
                if (flag == false && (chars[i]%2 != 0)) {
                    flag = true;
                }
            }
        }
        for (char i = 'A'; i <= 'Z'; i++) {
            if (chars[i] > 0) {
                length += chars[i] - (chars[i]%2);
                if (flag == false && (chars[i]%2 != 0)) {
                    flag = true;
                }
            }
        }
        if (flag) {
            length++;
        }
        return length;
    }
}

//执行用时: 97 ms, 在Implement Queue using Stacks的Java提交中击败了28.66% 的用户

class MyQueue {
    Stack<Integer> myQueue;
    
    /** Initialize your data structure here. */
    public MyQueue() {
        myQueue = new Stack<Integer>();
    }
    
    /** Push element x to the back of queue. */
    public void push(int x) {
        myQueue.push(x);
    }
    
    /** Removes the element from in front of queue and returns that element. */
    public int pop() {
        ArrayList<Integer> temp = new ArrayList<Integer>();
        while (!myQueue.isEmpty()) {
            temp.add(myQueue.pop());    
        }
        for (int i = temp.size() - 2; i >= 0; i--) {
            myQueue.push(temp.get(i));
        }
        return temp.get(temp.size() - 1).intValue();
    }
    
    /** Get the front element. */
    public int peek() {
        ArrayList<Integer> temp = new ArrayList<Integer>();
        while (!myQueue.isEmpty()) {
            temp.add(myQueue.pop());    
        }
        for (int i = temp.size() - 1; i >= 0; i--) {
            myQueue.push(temp.get(i));
        }
        return temp.get(temp.size() - 1).intValue();
    }
    
    /** Returns whether the queue is empty. */
    public boolean empty() {
        return myQueue.isEmpty();
    }
}

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * boolean param_4 = obj.empty();
 */
